spring.application.name=asatisamaj-matrimony-web
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

spring.jackson.serialization.write-dates-as-timestamps=false


spring.datasource.url=jdbc:mysql://asatisamaj.cutcotmggcrq.ap-south-1.rds.amazonaws.com:8100/asatisamaj
#spring.datasource.url=jdbc:mysql://localhost:8100/asatisamaj?allowPublicKeyRetrieval=true
spring.datasource.username=ENC(1EE7gU5ke/u3ZszbOxvfNF1qJK6Z9vwW)
spring.datasource.password=ENC(DoPAq0RPh8z2XA8UVit/I5gkgWGEemt/)
#jasypt.encryptor.password=${jasypt.encryptor.password}
jasypt.encryptor.password=wagle@123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true

#DB pool config
# Maximum number of milliseconds that a client will wait for a connection from connection pool
spring.datasource.hikari.connection-timeout=20000 
# Minimum number of idle connections
spring.datasource.hikari.minimum-idle=2
# Maximum pool size
spring.datasource.hikari.maximum-pool-size=5


# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false
#########################################################
#Adding ResourceUrlEncodingFilter i.e. to version static 
#js and css files to prevent caching by browser
#########################################################

#Whether to enable the Spring Resource Handling chain. 
#By default, disabled unless at least one strategy has 
#been enabled.
spring.web.resources.chain.enabled=true

# Whether to enable the content Version Strategy.
spring.web.resources.chain.strategy.content.enabled=true

#Comma-separated list of patterns to apply to the content 
#Version Strategy i.e. where are your js and css files
spring.web.resources.chain.strategy.content.paths=/js/**,/css/**

#secure token configuration
#60 * 60 * 8 // setting as 8 hours,
jdj.secure.token.validity = 28800
site.base.url.http=http://localhost:8080
site.base.url.https=http://localhost:8080


########## SMTP configuration to send out emails ##########
####### Make sure to use the correct SMTP configurations #######
spring.mail.host=in-v3.mailjet.com
spring.mail.port=587
spring.mail.username=81876ed1d070a493307d1ddffda8d50b
spring.mail.password=0e33e867b5d8fb9e317e04fe85ffb2c9
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Run Spring Boot on HTTPS only
server.port=8010

########## Manage Spring security session using the Spring Session and Redis #######
########## You can also use the JDBC backed session management for your application#####
spring.redis.host=redis-14723.c264.ap-south-1-1.ec2.cloud.redislabs.com
spring.redis.password=Nayra@12word
spring.redis.port=14723
# Namespace for keys used to store sessions.
spring.session.redis.namespace=spring:session

#Session timeout setting for your application
#server.servlet.session.timeout=5s

management.endpoints.web.exposure.include=*

#### Brute force attack counter, you can also handle this through a generic database back configuration ###############
jdj.security.failedlogin.count =2
jdj.brute.force.cache.max=1000
